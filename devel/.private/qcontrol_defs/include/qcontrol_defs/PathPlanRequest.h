// Generated by gencpp from file qcontrol_defs/PathPlanRequest.msg
// DO NOT EDIT!


#ifndef QCONTROL_DEFS_MESSAGE_PATHPLANREQUEST_H
#define QCONTROL_DEFS_MESSAGE_PATHPLANREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <qcontrol_defs/WayPoints.h>

namespace qcontrol_defs
{
template <class ContainerAllocator>
struct PathPlanRequest_
{
  typedef PathPlanRequest_<ContainerAllocator> Type;

  PathPlanRequest_()
    : solver_choice(0)
    , freq(0)
    , waypoints()  {
    }
  PathPlanRequest_(const ContainerAllocator& _alloc)
    : solver_choice(0)
    , freq(0)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _solver_choice_type;
  _solver_choice_type solver_choice;

   typedef uint32_t _freq_type;
  _freq_type freq;

   typedef  ::qcontrol_defs::WayPoints_<ContainerAllocator>  _waypoints_type;
  _waypoints_type waypoints;


    enum { AUTOMATIC_SOLVER = 0u };
     enum { ALGLIB_CORRIDOR = 1u };
     enum { ALGLIB_CORRIDOR_DENSEAUL = 2u };
     enum { ALGLIB_CORRIDOR_BLEIC = 3u };
     enum { ITERATIVE_CORRIDOR = 4u };
     enum { ITERATIVE_CORRIDOR_BLEIC = 6u };
     enum { ITERATIVE_CORRIDOR_DENSEAUL = 7u };
     enum { ALGLIB_DENSEAUL = 8u };
     enum { ALGLIB_BLEIC = 9u };
     static const double NAN_VALUE;
 

  typedef boost::shared_ptr< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PathPlanRequest_

typedef ::qcontrol_defs::PathPlanRequest_<std::allocator<void> > PathPlanRequest;

typedef boost::shared_ptr< ::qcontrol_defs::PathPlanRequest > PathPlanRequestPtr;
typedef boost::shared_ptr< ::qcontrol_defs::PathPlanRequest const> PathPlanRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   
   template<typename ContainerAllocator> const double
      PathPlanRequest_<ContainerAllocator>::NAN_VALUE =
        
          3.141592653
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qcontrol_defs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'qcontrol_defs': ['/home/kasun/catkin_ws/src/PX4_ROS_packages/qcontrol_defs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c2f658e67ac490c6ed42e01ba4bdb4e";
  }

  static const char* value(const ::qcontrol_defs::PathPlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c2f658e67ac490cULL;
  static const uint64_t static_value2 = 0x6ed42e01ba4bdb4eULL;
};

template<class ContainerAllocator>
struct DataType< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qcontrol_defs/PathPlanRequest";
  }

  static const char* value(const ::qcontrol_defs::PathPlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 AUTOMATIC_SOLVER=0\n\
\n\
uint8 ALGLIB_CORRIDOR=1\n\
uint8 ALGLIB_CORRIDOR_DENSEAUL=2\n\
uint8 ALGLIB_CORRIDOR_BLEIC=3\n\
\n\
uint8 ITERATIVE_CORRIDOR=4\n\
uint8 ITERATIVE_CORRIDOR_BLEIC=6\n\
uint8 ITERATIVE_CORRIDOR_DENSEAUL=7\n\
\n\
uint8 ALGLIB_DENSEAUL=8\n\
uint8 ALGLIB_BLEIC=9\n\
\n\
\n\
float64 NAN_VALUE=3.141592653\n\
\n\
\n\
uint8 solver_choice\n\
\n\
uint32 freq\n\
WayPoints waypoints\n\
\n\
================================================================================\n\
MSG: qcontrol_defs/WayPoints\n\
#This message defines the list of constrained points and yaw that should be use to\n\
#generate the trajectory.\n\
\n\
ConstraintAxis[] yaw			#Can be empy if no need of a trajectory for the YAW. ELSE it should have\n\
								#the same length as time.\n\
ConstraintAxis[] x				#Should have the same length as time\n\
ConstraintAxis[] y\n\
ConstraintAxis[] z\n\
\n\
float64[] t						#Can be a list of two if you have just the initial and final time. Optimal segment time will be used instead\n\
float64[] corridors\n\
================================================================================\n\
MSG: qcontrol_defs/ConstraintAxis\n\
#This message represents a Yaw target and all the constraints that can be applied to\n\
#this yaw target. Note that you can only go to the first order of derivation for the yaw (yaw rate control)\n\
\n\
float64 axis\n\
ConstraintValue[] constraints\n\
================================================================================\n\
MSG: qcontrol_defs/ConstraintValue\n\
#A constrained Value represents a constraint on x,y,z, yaw derivatives.\n\
#For example the constraint equality : Vx = 2.0 or Vx <= 2.0 can be write with the following ConstraintValue Object :\n\
### derive_order = FIRST_ORDER\n\
### value = 2.0\n\
### comparison = EQUAL or comparison = INF\n\
# For yaw we currently support only first order constraint. And second order constraints \n\
#for the position. \n\
\n\
uint32 FIRST_ORDER = 1\n\
uint32 SECOND_ORDER = 2\n\
uint32 THIRD_ORDER = 3\n\
\n\
bool bndl_valid\n\
bool bndu_valid\n\
\n\
uint8 label					#Not have to be used by the user\n\
uint32 derive_order			#Can be FIRST_ORDER, SECOND_ORDER , THIRD_ORDER\n\
float64 bndl\n\
float64 bndu\n\
";
  }

  static const char* value(const ::qcontrol_defs::PathPlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.solver_choice);
      stream.next(m.freq);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qcontrol_defs::PathPlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qcontrol_defs::PathPlanRequest_<ContainerAllocator>& v)
  {
    s << indent << "solver_choice: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solver_choice);
    s << indent << "freq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.freq);
    s << indent << "waypoints: ";
    s << std::endl;
    Printer< ::qcontrol_defs::WayPoints_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QCONTROL_DEFS_MESSAGE_PATHPLANREQUEST_H
