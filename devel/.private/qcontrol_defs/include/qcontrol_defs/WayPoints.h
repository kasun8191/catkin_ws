// Generated by gencpp from file qcontrol_defs/WayPoints.msg
// DO NOT EDIT!


#ifndef QCONTROL_DEFS_MESSAGE_WAYPOINTS_H
#define QCONTROL_DEFS_MESSAGE_WAYPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <qcontrol_defs/ConstraintAxis.h>
#include <qcontrol_defs/ConstraintAxis.h>
#include <qcontrol_defs/ConstraintAxis.h>
#include <qcontrol_defs/ConstraintAxis.h>

namespace qcontrol_defs
{
template <class ContainerAllocator>
struct WayPoints_
{
  typedef WayPoints_<ContainerAllocator> Type;

  WayPoints_()
    : yaw()
    , x()
    , y()
    , z()
    , t()
    , corridors()  {
    }
  WayPoints_(const ContainerAllocator& _alloc)
    : yaw(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , t(_alloc)
    , corridors(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::other >  _yaw_type;
  _yaw_type yaw;

   typedef std::vector< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::other >  _x_type;
  _x_type x;

   typedef std::vector< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::other >  _y_type;
  _y_type y;

   typedef std::vector< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::other >  _z_type;
  _z_type z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _t_type;
  _t_type t;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _corridors_type;
  _corridors_type corridors;




  typedef boost::shared_ptr< ::qcontrol_defs::WayPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qcontrol_defs::WayPoints_<ContainerAllocator> const> ConstPtr;

}; // struct WayPoints_

typedef ::qcontrol_defs::WayPoints_<std::allocator<void> > WayPoints;

typedef boost::shared_ptr< ::qcontrol_defs::WayPoints > WayPointsPtr;
typedef boost::shared_ptr< ::qcontrol_defs::WayPoints const> WayPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qcontrol_defs::WayPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qcontrol_defs::WayPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qcontrol_defs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'qcontrol_defs': ['/home/kasun/catkin_ws/src/PX4_ROS_packages/qcontrol_defs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::WayPoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::WayPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::WayPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "762c41a819a42f04927bbc931431e5b6";
  }

  static const char* value(const ::qcontrol_defs::WayPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x762c41a819a42f04ULL;
  static const uint64_t static_value2 = 0x927bbc931431e5b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qcontrol_defs/WayPoints";
  }

  static const char* value(const ::qcontrol_defs::WayPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message defines the list of constrained points and yaw that should be use to\n\
#generate the trajectory.\n\
\n\
ConstraintAxis[] yaw			#Can be empy if no need of a trajectory for the YAW. ELSE it should have\n\
								#the same length as time.\n\
ConstraintAxis[] x				#Should have the same length as time\n\
ConstraintAxis[] y\n\
ConstraintAxis[] z\n\
\n\
float64[] t						#Can be a list of two if you have just the initial and final time. Optimal segment time will be used instead\n\
float64[] corridors\n\
================================================================================\n\
MSG: qcontrol_defs/ConstraintAxis\n\
#This message represents a Yaw target and all the constraints that can be applied to\n\
#this yaw target. Note that you can only go to the first order of derivation for the yaw (yaw rate control)\n\
\n\
float64 axis\n\
ConstraintValue[] constraints\n\
================================================================================\n\
MSG: qcontrol_defs/ConstraintValue\n\
#A constrained Value represents a constraint on x,y,z, yaw derivatives.\n\
#For example the constraint equality : Vx = 2.0 or Vx <= 2.0 can be write with the following ConstraintValue Object :\n\
### derive_order = FIRST_ORDER\n\
### value = 2.0\n\
### comparison = EQUAL or comparison = INF\n\
# For yaw we currently support only first order constraint. And second order constraints \n\
#for the position. \n\
\n\
uint32 FIRST_ORDER = 1\n\
uint32 SECOND_ORDER = 2\n\
uint32 THIRD_ORDER = 3\n\
\n\
bool bndl_valid\n\
bool bndu_valid\n\
\n\
uint8 label					#Not have to be used by the user\n\
uint32 derive_order			#Can be FIRST_ORDER, SECOND_ORDER , THIRD_ORDER\n\
float64 bndl\n\
float64 bndu\n\
";
  }

  static const char* value(const ::qcontrol_defs::WayPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.t);
      stream.next(m.corridors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WayPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qcontrol_defs::WayPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qcontrol_defs::WayPoints_<ContainerAllocator>& v)
  {
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::stream(s, indent + "    ", v.yaw[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::stream(s, indent + "    ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::stream(s, indent + "    ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::stream(s, indent + "    ", v.z[i]);
    }
    s << indent << "t[]" << std::endl;
    for (size_t i = 0; i < v.t.size(); ++i)
    {
      s << indent << "  t[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.t[i]);
    }
    s << indent << "corridors[]" << std::endl;
    for (size_t i = 0; i < v.corridors.size(); ++i)
    {
      s << indent << "  corridors[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.corridors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QCONTROL_DEFS_MESSAGE_WAYPOINTS_H
