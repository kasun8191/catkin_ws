// Generated by gencpp from file qcontrol_defs/VelControl.msg
// DO NOT EDIT!


#ifndef QCONTROL_DEFS_MESSAGE_VELCONTROL_H
#define QCONTROL_DEFS_MESSAGE_VELCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace qcontrol_defs
{
template <class ContainerAllocator>
struct VelControl_
{
  typedef VelControl_<ContainerAllocator> Type;

  VelControl_()
    : is_body_frame(false)
    , vel()
    , yaw_rate(0.0)  {
    }
  VelControl_(const ContainerAllocator& _alloc)
    : is_body_frame(false)
    , vel(_alloc)
    , yaw_rate(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _is_body_frame_type;
  _is_body_frame_type is_body_frame;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;




  typedef boost::shared_ptr< ::qcontrol_defs::VelControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qcontrol_defs::VelControl_<ContainerAllocator> const> ConstPtr;

}; // struct VelControl_

typedef ::qcontrol_defs::VelControl_<std::allocator<void> > VelControl;

typedef boost::shared_ptr< ::qcontrol_defs::VelControl > VelControlPtr;
typedef boost::shared_ptr< ::qcontrol_defs::VelControl const> VelControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qcontrol_defs::VelControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qcontrol_defs::VelControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qcontrol_defs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'qcontrol_defs': ['/home/kasun/catkin_ws/src/PX4_ROS_packages/qcontrol_defs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::VelControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::VelControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::VelControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::VelControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::VelControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::VelControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qcontrol_defs::VelControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2a445bfd9620a6161c933e2adb00d77";
  }

  static const char* value(const ::qcontrol_defs::VelControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2a445bfd9620a61ULL;
  static const uint64_t static_value2 = 0x61c933e2adb00d77ULL;
};

template<class ContainerAllocator>
struct DataType< ::qcontrol_defs::VelControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qcontrol_defs/VelControl";
  }

  static const char* value(const ::qcontrol_defs::VelControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qcontrol_defs::VelControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_body_frame\n\
geometry_msgs/Vector3 vel\n\
float64 yaw_rate\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::qcontrol_defs::VelControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qcontrol_defs::VelControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_body_frame);
      stream.next(m.vel);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qcontrol_defs::VelControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qcontrol_defs::VelControl_<ContainerAllocator>& v)
  {
    s << indent << "is_body_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_body_frame);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QCONTROL_DEFS_MESSAGE_VELCONTROL_H
