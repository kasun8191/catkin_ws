// Generated by gencpp from file qcontrol_defs/QuadState.msg
// DO NOT EDIT!


#ifndef QCONTROL_DEFS_MESSAGE_QUADSTATE_H
#define QCONTROL_DEFS_MESSAGE_QUADSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qcontrol_defs
{
template <class ContainerAllocator>
struct QuadState_
{
  typedef QuadState_<ContainerAllocator> Type;

  QuadState_()
    : is_offboard(false)
    , is_attctl(false)
    , is_posctl(false)
    , is_velctl(false)
    , is_accctl(false)
    , is_pvactl(false)
    , is_armed(false)
    , is_landed(false)
    , is_takingoff(false)
    , is_landing(false)
    , takeoff_complete(false)  {
    }
  QuadState_(const ContainerAllocator& _alloc)
    : is_offboard(false)
    , is_attctl(false)
    , is_posctl(false)
    , is_velctl(false)
    , is_accctl(false)
    , is_pvactl(false)
    , is_armed(false)
    , is_landed(false)
    , is_takingoff(false)
    , is_landing(false)
    , takeoff_complete(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_offboard_type;
  _is_offboard_type is_offboard;

   typedef uint8_t _is_attctl_type;
  _is_attctl_type is_attctl;

   typedef uint8_t _is_posctl_type;
  _is_posctl_type is_posctl;

   typedef uint8_t _is_velctl_type;
  _is_velctl_type is_velctl;

   typedef uint8_t _is_accctl_type;
  _is_accctl_type is_accctl;

   typedef uint8_t _is_pvactl_type;
  _is_pvactl_type is_pvactl;

   typedef uint8_t _is_armed_type;
  _is_armed_type is_armed;

   typedef uint8_t _is_landed_type;
  _is_landed_type is_landed;

   typedef uint8_t _is_takingoff_type;
  _is_takingoff_type is_takingoff;

   typedef uint8_t _is_landing_type;
  _is_landing_type is_landing;

   typedef uint8_t _takeoff_complete_type;
  _takeoff_complete_type takeoff_complete;




  typedef boost::shared_ptr< ::qcontrol_defs::QuadState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qcontrol_defs::QuadState_<ContainerAllocator> const> ConstPtr;

}; // struct QuadState_

typedef ::qcontrol_defs::QuadState_<std::allocator<void> > QuadState;

typedef boost::shared_ptr< ::qcontrol_defs::QuadState > QuadStatePtr;
typedef boost::shared_ptr< ::qcontrol_defs::QuadState const> QuadStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qcontrol_defs::QuadState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qcontrol_defs::QuadState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qcontrol_defs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'qcontrol_defs': ['/home/kasun/catkin_ws/src/PX4_ROS_packages/qcontrol_defs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::QuadState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::QuadState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::QuadState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::QuadState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::QuadState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::QuadState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qcontrol_defs::QuadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53dc33c621c9e609f565bdc298644320";
  }

  static const char* value(const ::qcontrol_defs::QuadState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53dc33c621c9e609ULL;
  static const uint64_t static_value2 = 0xf565bdc298644320ULL;
};

template<class ContainerAllocator>
struct DataType< ::qcontrol_defs::QuadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qcontrol_defs/QuadState";
  }

  static const char* value(const ::qcontrol_defs::QuadState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qcontrol_defs::QuadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_offboard\n\
bool is_attctl\n\
bool is_posctl\n\
bool is_velctl\n\
bool is_accctl\n\
bool is_pvactl\n\
bool is_armed\n\
bool is_landed\n\
bool is_takingoff\n\
bool is_landing\n\
bool takeoff_complete\n\
";
  }

  static const char* value(const ::qcontrol_defs::QuadState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qcontrol_defs::QuadState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_offboard);
      stream.next(m.is_attctl);
      stream.next(m.is_posctl);
      stream.next(m.is_velctl);
      stream.next(m.is_accctl);
      stream.next(m.is_pvactl);
      stream.next(m.is_armed);
      stream.next(m.is_landed);
      stream.next(m.is_takingoff);
      stream.next(m.is_landing);
      stream.next(m.takeoff_complete);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qcontrol_defs::QuadState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qcontrol_defs::QuadState_<ContainerAllocator>& v)
  {
    s << indent << "is_offboard: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_offboard);
    s << indent << "is_attctl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_attctl);
    s << indent << "is_posctl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_posctl);
    s << indent << "is_velctl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_velctl);
    s << indent << "is_accctl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_accctl);
    s << indent << "is_pvactl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_pvactl);
    s << indent << "is_armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_armed);
    s << indent << "is_landed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_landed);
    s << indent << "is_takingoff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_takingoff);
    s << indent << "is_landing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_landing);
    s << indent << "takeoff_complete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.takeoff_complete);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QCONTROL_DEFS_MESSAGE_QUADSTATE_H
