// Generated by gencpp from file qcontrol_defs/ConstraintAxis.msg
// DO NOT EDIT!


#ifndef QCONTROL_DEFS_MESSAGE_CONSTRAINTAXIS_H
#define QCONTROL_DEFS_MESSAGE_CONSTRAINTAXIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <qcontrol_defs/ConstraintValue.h>

namespace qcontrol_defs
{
template <class ContainerAllocator>
struct ConstraintAxis_
{
  typedef ConstraintAxis_<ContainerAllocator> Type;

  ConstraintAxis_()
    : axis(0.0)
    , constraints()  {
    }
  ConstraintAxis_(const ContainerAllocator& _alloc)
    : axis(0.0)
    , constraints(_alloc)  {
  (void)_alloc;
    }



   typedef double _axis_type;
  _axis_type axis;

   typedef std::vector< ::qcontrol_defs::ConstraintValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qcontrol_defs::ConstraintValue_<ContainerAllocator> >::other >  _constraints_type;
  _constraints_type constraints;




  typedef boost::shared_ptr< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> const> ConstPtr;

}; // struct ConstraintAxis_

typedef ::qcontrol_defs::ConstraintAxis_<std::allocator<void> > ConstraintAxis;

typedef boost::shared_ptr< ::qcontrol_defs::ConstraintAxis > ConstraintAxisPtr;
typedef boost::shared_ptr< ::qcontrol_defs::ConstraintAxis const> ConstraintAxisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qcontrol_defs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'qcontrol_defs': ['/home/kasun/catkin_ws/src/PX4_ROS_packages/qcontrol_defs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a3ab439c2f736c9c80e82ebfc256932";
  }

  static const char* value(const ::qcontrol_defs::ConstraintAxis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a3ab439c2f736c9ULL;
  static const uint64_t static_value2 = 0xc80e82ebfc256932ULL;
};

template<class ContainerAllocator>
struct DataType< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qcontrol_defs/ConstraintAxis";
  }

  static const char* value(const ::qcontrol_defs::ConstraintAxis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message represents a Yaw target and all the constraints that can be applied to\n\
#this yaw target. Note that you can only go to the first order of derivation for the yaw (yaw rate control)\n\
\n\
float64 axis\n\
ConstraintValue[] constraints\n\
================================================================================\n\
MSG: qcontrol_defs/ConstraintValue\n\
#A constrained Value represents a constraint on x,y,z, yaw derivatives.\n\
#For example the constraint equality : Vx = 2.0 or Vx <= 2.0 can be write with the following ConstraintValue Object :\n\
### derive_order = FIRST_ORDER\n\
### value = 2.0\n\
### comparison = EQUAL or comparison = INF\n\
# For yaw we currently support only first order constraint. And second order constraints \n\
#for the position. \n\
\n\
uint32 FIRST_ORDER = 1\n\
uint32 SECOND_ORDER = 2\n\
uint32 THIRD_ORDER = 3\n\
\n\
bool bndl_valid\n\
bool bndu_valid\n\
\n\
uint8 label					#Not have to be used by the user\n\
uint32 derive_order			#Can be FIRST_ORDER, SECOND_ORDER , THIRD_ORDER\n\
float64 bndl\n\
float64 bndu\n\
";
  }

  static const char* value(const ::qcontrol_defs::ConstraintAxis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.axis);
      stream.next(m.constraints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConstraintAxis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qcontrol_defs::ConstraintAxis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qcontrol_defs::ConstraintAxis_<ContainerAllocator>& v)
  {
    s << indent << "axis: ";
    Printer<double>::stream(s, indent + "  ", v.axis);
    s << indent << "constraints[]" << std::endl;
    for (size_t i = 0; i < v.constraints.size(); ++i)
    {
      s << indent << "  constraints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qcontrol_defs::ConstraintValue_<ContainerAllocator> >::stream(s, indent + "    ", v.constraints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QCONTROL_DEFS_MESSAGE_CONSTRAINTAXIS_H
