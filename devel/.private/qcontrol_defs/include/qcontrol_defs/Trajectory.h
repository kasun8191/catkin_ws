// Generated by gencpp from file qcontrol_defs/Trajectory.msg
// DO NOT EDIT!


#ifndef QCONTROL_DEFS_MESSAGE_TRAJECTORY_H
#define QCONTROL_DEFS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <qcontrol_defs/PVA.h>

namespace qcontrol_defs
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : pva()
    , wait_freq()  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : pva(_alloc)
    , wait_freq(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::qcontrol_defs::PVA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qcontrol_defs::PVA_<ContainerAllocator> >::other >  _pva_type;
  _pva_type pva;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _wait_freq_type;
  _wait_freq_type wait_freq;




  typedef boost::shared_ptr< ::qcontrol_defs::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qcontrol_defs::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::qcontrol_defs::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::qcontrol_defs::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::qcontrol_defs::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qcontrol_defs::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qcontrol_defs::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qcontrol_defs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'qcontrol_defs': ['/home/kasun/catkin_ws/src/PX4_ROS_packages/qcontrol_defs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qcontrol_defs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qcontrol_defs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qcontrol_defs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae0f98958ce86ee063c4638828dfa3b4";
  }

  static const char* value(const ::qcontrol_defs::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae0f98958ce86ee0ULL;
  static const uint64_t static_value2 = 0x63c4638828dfa3b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qcontrol_defs/Trajectory";
  }

  static const char* value(const ::qcontrol_defs::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PVA[] pva\n\
uint32[] wait_freq\n\
================================================================================\n\
MSG: qcontrol_defs/PVA\n\
bool is_body_frame\n\
geometry_msgs/Point pos\n\
geometry_msgs/Vector3 vel\n\
geometry_msgs/Vector3 acc\n\
float64 yaw\n\
float64 yaw_rate\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::qcontrol_defs::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pva);
      stream.next(m.wait_freq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qcontrol_defs::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qcontrol_defs::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "pva[]" << std::endl;
    for (size_t i = 0; i < v.pva.size(); ++i)
    {
      s << indent << "  pva[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qcontrol_defs::PVA_<ContainerAllocator> >::stream(s, indent + "    ", v.pva[i]);
    }
    s << indent << "wait_freq[]" << std::endl;
    for (size_t i = 0; i < v.wait_freq.size(); ++i)
    {
      s << indent << "  wait_freq[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.wait_freq[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QCONTROL_DEFS_MESSAGE_TRAJECTORY_H
