# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qcontrol_defs/WayPoints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import qcontrol_defs.msg

class WayPoints(genpy.Message):
  _md5sum = "762c41a819a42f04927bbc931431e5b6"
  _type = "qcontrol_defs/WayPoints"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#This message defines the list of constrained points and yaw that should be use to
#generate the trajectory.

ConstraintAxis[] yaw			#Can be empy if no need of a trajectory for the YAW. ELSE it should have
								#the same length as time.
ConstraintAxis[] x				#Should have the same length as time
ConstraintAxis[] y
ConstraintAxis[] z

float64[] t						#Can be a list of two if you have just the initial and final time. Optimal segment time will be used instead
float64[] corridors
================================================================================
MSG: qcontrol_defs/ConstraintAxis
#This message represents a Yaw target and all the constraints that can be applied to
#this yaw target. Note that you can only go to the first order of derivation for the yaw (yaw rate control)

float64 axis
ConstraintValue[] constraints
================================================================================
MSG: qcontrol_defs/ConstraintValue
#A constrained Value represents a constraint on x,y,z, yaw derivatives.
#For example the constraint equality : Vx = 2.0 or Vx <= 2.0 can be write with the following ConstraintValue Object :
### derive_order = FIRST_ORDER
### value = 2.0
### comparison = EQUAL or comparison = INF
# For yaw we currently support only first order constraint. And second order constraints 
#for the position. 

uint32 FIRST_ORDER = 1
uint32 SECOND_ORDER = 2
uint32 THIRD_ORDER = 3

bool bndl_valid
bool bndu_valid

uint8 label					#Not have to be used by the user
uint32 derive_order			#Can be FIRST_ORDER, SECOND_ORDER , THIRD_ORDER
float64 bndl
float64 bndu"""
  __slots__ = ['yaw','x','y','z','t','corridors']
  _slot_types = ['qcontrol_defs/ConstraintAxis[]','qcontrol_defs/ConstraintAxis[]','qcontrol_defs/ConstraintAxis[]','qcontrol_defs/ConstraintAxis[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       yaw,x,y,z,t,corridors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WayPoints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.yaw is None:
        self.yaw = []
      if self.x is None:
        self.x = []
      if self.y is None:
        self.y = []
      if self.z is None:
        self.z = []
      if self.t is None:
        self.t = []
      if self.corridors is None:
        self.corridors = []
    else:
      self.yaw = []
      self.x = []
      self.y = []
      self.z = []
      self.t = []
      self.corridors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.yaw)
      buff.write(_struct_I.pack(length))
      for val1 in self.yaw:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.x)
      buff.write(_struct_I.pack(length))
      for val1 in self.x:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.y)
      buff.write(_struct_I.pack(length))
      for val1 in self.y:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.z)
      buff.write(_struct_I.pack(length))
      for val1 in self.z:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.t))
      length = len(self.corridors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.corridors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.yaw is None:
        self.yaw = None
      if self.x is None:
        self.x = None
      if self.y is None:
        self.y = None
      if self.z is None:
        self.z = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yaw = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.yaw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.x = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.x.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.y = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.y.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.z = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.z.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.t = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.corridors = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.yaw)
      buff.write(_struct_I.pack(length))
      for val1 in self.yaw:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.x)
      buff.write(_struct_I.pack(length))
      for val1 in self.x:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.y)
      buff.write(_struct_I.pack(length))
      for val1 in self.y:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.z)
      buff.write(_struct_I.pack(length))
      for val1 in self.z:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.t.tostring())
      length = len(self.corridors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.corridors.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.yaw is None:
        self.yaw = None
      if self.x is None:
        self.x = None
      if self.y is None:
        self.y = None
      if self.z is None:
        self.z = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yaw = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.yaw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.x = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.x.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.y = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.y.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.z = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.z.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.corridors = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3BI2d = None
def _get_struct_3BI2d():
    global _struct_3BI2d
    if _struct_3BI2d is None:
        _struct_3BI2d = struct.Struct("<3BI2d")
    return _struct_3BI2d
