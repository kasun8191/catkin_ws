# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qcontrol_defs/QuadState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class QuadState(genpy.Message):
  _md5sum = "53dc33c621c9e609f565bdc298644320"
  _type = "qcontrol_defs/QuadState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool is_offboard
bool is_attctl
bool is_posctl
bool is_velctl
bool is_accctl
bool is_pvactl
bool is_armed
bool is_landed
bool is_takingoff
bool is_landing
bool takeoff_complete"""
  __slots__ = ['is_offboard','is_attctl','is_posctl','is_velctl','is_accctl','is_pvactl','is_armed','is_landed','is_takingoff','is_landing','takeoff_complete']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_offboard,is_attctl,is_posctl,is_velctl,is_accctl,is_pvactl,is_armed,is_landed,is_takingoff,is_landing,takeoff_complete

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QuadState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_offboard is None:
        self.is_offboard = False
      if self.is_attctl is None:
        self.is_attctl = False
      if self.is_posctl is None:
        self.is_posctl = False
      if self.is_velctl is None:
        self.is_velctl = False
      if self.is_accctl is None:
        self.is_accctl = False
      if self.is_pvactl is None:
        self.is_pvactl = False
      if self.is_armed is None:
        self.is_armed = False
      if self.is_landed is None:
        self.is_landed = False
      if self.is_takingoff is None:
        self.is_takingoff = False
      if self.is_landing is None:
        self.is_landing = False
      if self.takeoff_complete is None:
        self.takeoff_complete = False
    else:
      self.is_offboard = False
      self.is_attctl = False
      self.is_posctl = False
      self.is_velctl = False
      self.is_accctl = False
      self.is_pvactl = False
      self.is_armed = False
      self.is_landed = False
      self.is_takingoff = False
      self.is_landing = False
      self.takeoff_complete = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.is_offboard, _x.is_attctl, _x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_armed, _x.is_landed, _x.is_takingoff, _x.is_landing, _x.takeoff_complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.is_offboard, _x.is_attctl, _x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_armed, _x.is_landed, _x.is_takingoff, _x.is_landing, _x.takeoff_complete,) = _get_struct_11B().unpack(str[start:end])
      self.is_offboard = bool(self.is_offboard)
      self.is_attctl = bool(self.is_attctl)
      self.is_posctl = bool(self.is_posctl)
      self.is_velctl = bool(self.is_velctl)
      self.is_accctl = bool(self.is_accctl)
      self.is_pvactl = bool(self.is_pvactl)
      self.is_armed = bool(self.is_armed)
      self.is_landed = bool(self.is_landed)
      self.is_takingoff = bool(self.is_takingoff)
      self.is_landing = bool(self.is_landing)
      self.takeoff_complete = bool(self.takeoff_complete)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.is_offboard, _x.is_attctl, _x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_armed, _x.is_landed, _x.is_takingoff, _x.is_landing, _x.takeoff_complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.is_offboard, _x.is_attctl, _x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_armed, _x.is_landed, _x.is_takingoff, _x.is_landing, _x.takeoff_complete,) = _get_struct_11B().unpack(str[start:end])
      self.is_offboard = bool(self.is_offboard)
      self.is_attctl = bool(self.is_attctl)
      self.is_posctl = bool(self.is_posctl)
      self.is_velctl = bool(self.is_velctl)
      self.is_accctl = bool(self.is_accctl)
      self.is_pvactl = bool(self.is_pvactl)
      self.is_armed = bool(self.is_armed)
      self.is_landed = bool(self.is_landed)
      self.is_takingoff = bool(self.is_takingoff)
      self.is_landing = bool(self.is_landing)
      self.takeoff_complete = bool(self.takeoff_complete)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11B = None
def _get_struct_11B():
    global _struct_11B
    if _struct_11B is None:
        _struct_11B = struct.Struct("<11B")
    return _struct_11B
