# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qcontrol_defs/ConstraintValue.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConstraintValue(genpy.Message):
  _md5sum = "d75775227183c81be4618f85cf200060"
  _type = "qcontrol_defs/ConstraintValue"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#A constrained Value represents a constraint on x,y,z, yaw derivatives.
#For example the constraint equality : Vx = 2.0 or Vx <= 2.0 can be write with the following ConstraintValue Object :
### derive_order = FIRST_ORDER
### value = 2.0
### comparison = EQUAL or comparison = INF
# For yaw we currently support only first order constraint. And second order constraints 
#for the position. 

uint32 FIRST_ORDER = 1
uint32 SECOND_ORDER = 2
uint32 THIRD_ORDER = 3

bool bndl_valid
bool bndu_valid

uint8 label					#Not have to be used by the user
uint32 derive_order			#Can be FIRST_ORDER, SECOND_ORDER , THIRD_ORDER
float64 bndl
float64 bndu"""
  # Pseudo-constants
  FIRST_ORDER = 1
  SECOND_ORDER = 2
  THIRD_ORDER = 3

  __slots__ = ['bndl_valid','bndu_valid','label','derive_order','bndl','bndu']
  _slot_types = ['bool','bool','uint8','uint32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bndl_valid,bndu_valid,label,derive_order,bndl,bndu

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConstraintValue, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bndl_valid is None:
        self.bndl_valid = False
      if self.bndu_valid is None:
        self.bndu_valid = False
      if self.label is None:
        self.label = 0
      if self.derive_order is None:
        self.derive_order = 0
      if self.bndl is None:
        self.bndl = 0.
      if self.bndu is None:
        self.bndu = 0.
    else:
      self.bndl_valid = False
      self.bndu_valid = False
      self.label = 0
      self.derive_order = 0
      self.bndl = 0.
      self.bndu = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
      self.bndl_valid = bool(self.bndl_valid)
      self.bndu_valid = bool(self.bndu_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
      self.bndl_valid = bool(self.bndl_valid)
      self.bndu_valid = bool(self.bndu_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BI2d = None
def _get_struct_3BI2d():
    global _struct_3BI2d
    if _struct_3BI2d is None:
        _struct_3BI2d = struct.Struct("<3BI2d")
    return _struct_3BI2d
