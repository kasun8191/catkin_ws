# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qcontrol_defs/PathPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import qcontrol_defs.msg

class PathPlanRequest(genpy.Message):
  _md5sum = "8c2f658e67ac490c6ed42e01ba4bdb4e"
  _type = "qcontrol_defs/PathPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 AUTOMATIC_SOLVER=0

uint8 ALGLIB_CORRIDOR=1
uint8 ALGLIB_CORRIDOR_DENSEAUL=2
uint8 ALGLIB_CORRIDOR_BLEIC=3

uint8 ITERATIVE_CORRIDOR=4
uint8 ITERATIVE_CORRIDOR_BLEIC=6
uint8 ITERATIVE_CORRIDOR_DENSEAUL=7

uint8 ALGLIB_DENSEAUL=8
uint8 ALGLIB_BLEIC=9


float64 NAN_VALUE=3.141592653


uint8 solver_choice

uint32 freq
WayPoints waypoints

================================================================================
MSG: qcontrol_defs/WayPoints
#This message defines the list of constrained points and yaw that should be use to
#generate the trajectory.

ConstraintAxis[] yaw			#Can be empy if no need of a trajectory for the YAW. ELSE it should have
								#the same length as time.
ConstraintAxis[] x				#Should have the same length as time
ConstraintAxis[] y
ConstraintAxis[] z

float64[] t						#Can be a list of two if you have just the initial and final time. Optimal segment time will be used instead
float64[] corridors
================================================================================
MSG: qcontrol_defs/ConstraintAxis
#This message represents a Yaw target and all the constraints that can be applied to
#this yaw target. Note that you can only go to the first order of derivation for the yaw (yaw rate control)

float64 axis
ConstraintValue[] constraints
================================================================================
MSG: qcontrol_defs/ConstraintValue
#A constrained Value represents a constraint on x,y,z, yaw derivatives.
#For example the constraint equality : Vx = 2.0 or Vx <= 2.0 can be write with the following ConstraintValue Object :
### derive_order = FIRST_ORDER
### value = 2.0
### comparison = EQUAL or comparison = INF
# For yaw we currently support only first order constraint. And second order constraints 
#for the position. 

uint32 FIRST_ORDER = 1
uint32 SECOND_ORDER = 2
uint32 THIRD_ORDER = 3

bool bndl_valid
bool bndu_valid

uint8 label					#Not have to be used by the user
uint32 derive_order			#Can be FIRST_ORDER, SECOND_ORDER , THIRD_ORDER
float64 bndl
float64 bndu"""
  # Pseudo-constants
  AUTOMATIC_SOLVER = 0
  ALGLIB_CORRIDOR = 1
  ALGLIB_CORRIDOR_DENSEAUL = 2
  ALGLIB_CORRIDOR_BLEIC = 3
  ITERATIVE_CORRIDOR = 4
  ITERATIVE_CORRIDOR_BLEIC = 6
  ITERATIVE_CORRIDOR_DENSEAUL = 7
  ALGLIB_DENSEAUL = 8
  ALGLIB_BLEIC = 9
  NAN_VALUE = 3.141592653

  __slots__ = ['solver_choice','freq','waypoints']
  _slot_types = ['uint8','uint32','qcontrol_defs/WayPoints']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       solver_choice,freq,waypoints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.solver_choice is None:
        self.solver_choice = 0
      if self.freq is None:
        self.freq = 0
      if self.waypoints is None:
        self.waypoints = qcontrol_defs.msg.WayPoints()
    else:
      self.solver_choice = 0
      self.freq = 0
      self.waypoints = qcontrol_defs.msg.WayPoints()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.solver_choice, _x.freq))
      length = len(self.waypoints.yaw)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.yaw:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.x)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.x:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.y)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.y:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.z)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.z:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.waypoints.t))
      length = len(self.waypoints.corridors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.waypoints.corridors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.waypoints is None:
        self.waypoints = qcontrol_defs.msg.WayPoints()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.solver_choice, _x.freq,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.yaw = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.yaw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.x = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.x.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.y = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.y.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.z = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.z.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoints.t = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoints.corridors = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.solver_choice, _x.freq))
      length = len(self.waypoints.yaw)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.yaw:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.x)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.x:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.y)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.y:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.z)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints.z:
        buff.write(_get_struct_d().pack(val1.axis))
        length = len(val1.constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.constraints:
          _x = val2
          buff.write(_get_struct_3BI2d().pack(_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu))
      length = len(self.waypoints.t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.waypoints.t.tostring())
      length = len(self.waypoints.corridors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.waypoints.corridors.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.waypoints is None:
        self.waypoints = qcontrol_defs.msg.WayPoints()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.solver_choice, _x.freq,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.yaw = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.yaw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.x = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.x.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.y = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.y.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints.z = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.ConstraintAxis()
        start = end
        end += 8
        (val1.axis,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.constraints = []
        for i in range(0, length):
          val2 = qcontrol_defs.msg.ConstraintValue()
          _x = val2
          start = end
          end += 23
          (_x.bndl_valid, _x.bndu_valid, _x.label, _x.derive_order, _x.bndl, _x.bndu,) = _get_struct_3BI2d().unpack(str[start:end])
          val2.bndl_valid = bool(val2.bndl_valid)
          val2.bndu_valid = bool(val2.bndu_valid)
          val1.constraints.append(val2)
        self.waypoints.z.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoints.t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoints.corridors = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BI2d = None
def _get_struct_3BI2d():
    global _struct_3BI2d
    if _struct_3BI2d is None:
        _struct_3BI2d = struct.Struct("<3BI2d")
    return _struct_3BI2d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qcontrol_defs/PathPlanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import qcontrol_defs.msg
import geometry_msgs.msg

class PathPlanResponse(genpy.Message):
  _md5sum = "49a9b609fb35b3fb4f1de98885cd90e5"
  _type = "qcontrol_defs/PathPlanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Trajectory traj

================================================================================
MSG: qcontrol_defs/Trajectory
PVA[] pva
uint32[] wait_freq
================================================================================
MSG: qcontrol_defs/PVA
bool is_body_frame
geometry_msgs/Point pos
geometry_msgs/Vector3 vel
geometry_msgs/Vector3 acc
float64 yaw
float64 yaw_rate
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['traj']
  _slot_types = ['qcontrol_defs/Trajectory']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       traj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.traj is None:
        self.traj = qcontrol_defs.msg.Trajectory()
    else:
      self.traj = qcontrol_defs.msg.Trajectory()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.traj.pva)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj.pva:
        buff.write(_get_struct_B().pack(val1.is_body_frame))
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.vel
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.acc
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.yaw, _x.yaw_rate))
      length = len(self.traj.wait_freq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.traj.wait_freq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.traj is None:
        self.traj = qcontrol_defs.msg.Trajectory()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj.pva = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.PVA()
        start = end
        end += 1
        (val1.is_body_frame,) = _get_struct_B().unpack(str[start:end])
        val1.is_body_frame = bool(val1.is_body_frame)
        _v4 = val1.pos
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v5 = val1.vel
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.acc
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.yaw, _x.yaw_rate,) = _get_struct_2d().unpack(str[start:end])
        self.traj.pva.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.wait_freq = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.traj.pva)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj.pva:
        buff.write(_get_struct_B().pack(val1.is_body_frame))
        _v7 = val1.pos
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.vel
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.acc
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.yaw, _x.yaw_rate))
      length = len(self.traj.wait_freq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.traj.wait_freq.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.traj is None:
        self.traj = qcontrol_defs.msg.Trajectory()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj.pva = []
      for i in range(0, length):
        val1 = qcontrol_defs.msg.PVA()
        start = end
        end += 1
        (val1.is_body_frame,) = _get_struct_B().unpack(str[start:end])
        val1.is_body_frame = bool(val1.is_body_frame)
        _v10 = val1.pos
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = val1.vel
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = val1.acc
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.yaw, _x.yaw_rate,) = _get_struct_2d().unpack(str[start:end])
        self.traj.pva.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.wait_freq = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class PathPlan(object):
  _type          = 'qcontrol_defs/PathPlan'
  _md5sum = 'cf49295d8e9d40310a490e9a26c5cd75'
  _request_class  = PathPlanRequest
  _response_class = PathPlanResponse
