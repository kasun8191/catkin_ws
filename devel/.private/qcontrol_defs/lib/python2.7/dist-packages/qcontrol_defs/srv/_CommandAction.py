# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qcontrol_defs/CommandActionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CommandActionRequest(genpy.Message):
  _md5sum = "018af1d1eba247c690a918fa3963309f"
  _type = "qcontrol_defs/CommandActionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint8 IS_POSCTL_UNDEFINED = 0
uint8 IS_POSCTL_TRUE = 1
uint8 IS_POSCTL_FALSE = 2

uint8 IS_VELCTL_UNDEFINED = 0
uint8 IS_VELCTL_TRUE = 1
uint8 IS_VELCTL_FALSE = 2

uint8 IS_ACCCTL_UNDEFINED = 0
uint8 IS_ACCCTL_TRUE = 1
uint8 IS_ACCCTL_FALSE = 2

uint8 IS_ATTCTL_UNDEFINED = 0
uint8 IS_ATTCTL_TRUE = 1
uint8 IS_ATTCTL_FALSE = 2

uint8 IS_PVACTL_UNDEFINED = 0
uint8 IS_PVACTL_TRUE = 1
uint8 IS_PVACTL_FALSE = 2

uint8 ARM_MOTOR_UNDEFINED = 0
uint8 ARM_MOTOR_TRUE = 1
uint8 ARM_MOTOR_FALSE  = 2

uint8 START_TAKEOFF_UNDEFINED = 0
uint8 START_TAKEOFF_TRUE = 1
uint8 START_TAKEOFF_FALSE = 2

uint8 START_LANDING_UNDEFINED = 0
uint8 START_LANDING_TRUE = 1
uint8 START_LANDING_FALSE = 2

uint8 is_posctl
uint8 is_velctl
uint8 is_accctl
uint8 is_pvactl
uint8 is_attctl
uint8 arm_motors
uint8 start_takeoff
uint8 start_landing
"""
  # Pseudo-constants
  IS_POSCTL_UNDEFINED = 0
  IS_POSCTL_TRUE = 1
  IS_POSCTL_FALSE = 2
  IS_VELCTL_UNDEFINED = 0
  IS_VELCTL_TRUE = 1
  IS_VELCTL_FALSE = 2
  IS_ACCCTL_UNDEFINED = 0
  IS_ACCCTL_TRUE = 1
  IS_ACCCTL_FALSE = 2
  IS_ATTCTL_UNDEFINED = 0
  IS_ATTCTL_TRUE = 1
  IS_ATTCTL_FALSE = 2
  IS_PVACTL_UNDEFINED = 0
  IS_PVACTL_TRUE = 1
  IS_PVACTL_FALSE = 2
  ARM_MOTOR_UNDEFINED = 0
  ARM_MOTOR_TRUE = 1
  ARM_MOTOR_FALSE = 2
  START_TAKEOFF_UNDEFINED = 0
  START_TAKEOFF_TRUE = 1
  START_TAKEOFF_FALSE = 2
  START_LANDING_UNDEFINED = 0
  START_LANDING_TRUE = 1
  START_LANDING_FALSE = 2

  __slots__ = ['is_posctl','is_velctl','is_accctl','is_pvactl','is_attctl','arm_motors','start_takeoff','start_landing']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_posctl,is_velctl,is_accctl,is_pvactl,is_attctl,arm_motors,start_takeoff,start_landing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CommandActionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_posctl is None:
        self.is_posctl = 0
      if self.is_velctl is None:
        self.is_velctl = 0
      if self.is_accctl is None:
        self.is_accctl = 0
      if self.is_pvactl is None:
        self.is_pvactl = 0
      if self.is_attctl is None:
        self.is_attctl = 0
      if self.arm_motors is None:
        self.arm_motors = 0
      if self.start_takeoff is None:
        self.start_takeoff = 0
      if self.start_landing is None:
        self.start_landing = 0
    else:
      self.is_posctl = 0
      self.is_velctl = 0
      self.is_accctl = 0
      self.is_pvactl = 0
      self.is_attctl = 0
      self.arm_motors = 0
      self.start_takeoff = 0
      self.start_landing = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_attctl, _x.arm_motors, _x.start_takeoff, _x.start_landing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_attctl, _x.arm_motors, _x.start_takeoff, _x.start_landing,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_attctl, _x.arm_motors, _x.start_takeoff, _x.start_landing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.is_posctl, _x.is_velctl, _x.is_accctl, _x.is_pvactl, _x.is_attctl, _x.arm_motors, _x.start_takeoff, _x.start_landing,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qcontrol_defs/CommandActionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CommandActionResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "qcontrol_defs/CommandActionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CommandActionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class CommandAction(object):
  _type          = 'qcontrol_defs/CommandAction'
  _md5sum = '1d87843bc14c424b23359395bac95872'
  _request_class  = CommandActionRequest
  _response_class = CommandActionResponse
